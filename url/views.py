from django.contrib import messages
from django.db import IntegrityError
from django.http import (HttpRequest, HttpResponse,
                         HttpResponsePermanentRedirect, HttpResponseRedirect)
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from .forms import UrlForm
from .models import Url
from .tools import hash_id


def home(request: HttpRequest) -> HttpResponse:
    """
    Main function, validates input from form.
    If it's valid:
    - checks if Url object with given code exists, displays warning if so
    - if object with given code doesn't exist creates new one
    - if code was not passed at all, creates new object with hashed ID as code

    Args:
        request (HttpRequest): Basic HTTP request

    Returns:
        HttpResponse: If new Url object was created, redirects with to detail view,
        otherwise returns to main form view
    """
    if request.method == "POST":
        form = UrlForm(request.POST)
        if form.is_valid():
            code = form.cleaned_data["code"]
            url = form.cleaned_data["full_url"]

            if code and Url.objects.filter(code__exact=code):
                messages.warning(
                    request,
                    "This code is already taken, please type in another one or leave this field empty for autogenerated code",
                )
                return render(
                    request,
                    "url/url_form.html",
                    {"form": form, "absolute_url": request.build_absolute_uri()},
                )
            elif code:
                new_url = Url(full_url=url, code=code)
            else:
                new_url = Url(full_url=url)
                new_url.save()
                new_url.code = hash_id(new_url.id)

            # In rare cases where hashed_id is equal to some custom code
            # Add 'forbidden' form character $ '
            try:
                new_url.save()
            except IntegrityError:
                new_url.code = f"{new_url.code}$"
                new_url.save()

            return HttpResponseRedirect(reverse("url:url-detail", args=(new_url.code,)))
    else:
        form = UrlForm()
    return render(
        request,
        "url/url_form.html",
        {"form": form, "absolute_url": request.build_absolute_uri()},
    )


def detail(request: HttpRequest, code: str) -> HttpResponse:
    """
    This function looks up for Url object with given code
    and redirects to it's detail view

    Args:
        request (HttpRequest): Basic HTTP request
        code (str): Shortened URL code

    Returns:
        HttpResponse: Url object detail view, 404 Not found error otherwise
    """
    obj = get_object_or_404(Url, code__exact=code)
    return render(
        request,
        "url/url_detail.html",
        {
            "short_url": request.build_absolute_uri(reverse("url:url-home")) + obj.code,
            "full_url": obj.full_url,
        },
    )


def redirect(request: HttpRequest, code: str) -> HttpResponse:
    """
    This function looks up for Url object with given code
    and redirects to it's full_url if object exists

    Args:
        request (HttpRequest): Basic HTTP request
        code (str): Shortened URL code

    Returns:
        HttpResponse: 301 Redirect to full_url if object was found,
        404  Not found error otherwise
    """
    obj = get_object_or_404(Url, code__exact=code)
    return HttpResponsePermanentRedirect(obj.full_url)
